package fp12

import (
	"github.com/alexeykiselev/gurvy/internal/tower"
	"github.com/alexeykiselev/gurvy/internal/tower/fp2"
	"github.com/alexeykiselev/gurvy/internal/tower/fp6"
)

// CodeSource is the aggregated source code
var CodeSource []string

// CodeTest is the aggregated test code
var CodeTest []string

// CodeTestPoints is the aggregated test points code
var CodeTestPoints []string

func init() {
	CodeSource = []string{
		base,
		mul,
		Inline,
		fp6.Inline,
		fp2.Inline,
		frobenius,
		expt,
	}

	CodeTest = []string{ // TODO move this to tower
		tower.Tests,
		customTests,
	}

	CodeTestPoints = []string{
		tower.TestPoints,
	}
}

const base = `// Code generated by internal/fp12 DO NOT EDIT 

package {{.PackageName}}

import (
	"github.com/alexeykiselev/gurvy/{{.PackageName}}/fp"
)

// {{.Name}} is a degree-two finite field extension of fp6:
// C0 + C1w where w^3-v is irrep in fp6

// fp2, fp12 are both quadratic field extensions
// template code is duplicated in fp2, fp12
// TODO make an abstract quadratic extension template

type {{.Name}} struct {
	C0, C1 {{.Fp6Name}}
}

// Equal compares two {{.Name}} elements
// TODO can this be deleted?
func (z *{{.Name}}) Equal(x *{{.Name}}) bool {
	return z.C0.Equal(&x.C0) && z.C1.Equal(&x.C1)
}

// String puts {{.Name}} in string form
func (z *{{.Name}}) String() string {
	return (z.C0.String() + "+(" + z.C1.String() + ")*w")
}

// SetString sets a {{.Name}} from string
func (z *{{.Name}}) SetString(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11 string) *{{.Name}} {
	z.C0.SetString(s0, s1, s2, s3, s4, s5)
	z.C1.SetString(s6, s7, s8, s9, s10, s11)
	return z
}

// Set copies x into z and returns z
func (z *{{.Name}}) Set(x *{{.Name}}) *{{.Name}} {
	z.C0 = x.C0
	z.C1 = x.C1
	return z
}

// SetOne sets z to 1 in {{.Name}} in Montgomery form and returns z
func (z *{{.Name}}) SetOne() *{{.Name}} {
	z.C0.B0.A0.SetOne()
	z.C0.B0.A1.SetZero()
	z.C0.B1.A0.SetZero()
	z.C0.B1.A1.SetZero()
	z.C0.B2.A0.SetZero()
	z.C0.B2.A1.SetZero()
	z.C1.B0.A0.SetZero()
	z.C1.B0.A1.SetZero()
	z.C1.B1.A0.SetZero()
	z.C1.B1.A1.SetZero()
	z.C1.B2.A0.SetZero()
	z.C1.B2.A1.SetZero()
	return z
}

// ToMont converts to Mont form
// TODO can this be deleted?
func (z *{{.Name}}) ToMont() *{{.Name}} {
	z.C0.ToMont()
	z.C1.ToMont()
	return z
}

// FromMont converts from Mont form
// TODO can this be deleted?
func (z *{{.Name}}) FromMont() *{{.Name}} {
	z.C0.FromMont()
	z.C1.FromMont()
	return z
}

// Add set z=x+y in {{.Name}} and return z
func (z *{{.Name}}) Add(x, y *{{.Name}}) *{{.Name}} {
	z.C0.Add(&x.C0, &y.C0)
	z.C1.Add(&x.C1, &y.C1)
	return z
}

// Sub set z=x-y in {{.Name}} and return z
func (z *{{.Name}}) Sub(x, y *{{.Name}}) *{{.Name}} {
	z.C0.Sub(&x.C0, &y.C0)
	z.C1.Sub(&x.C1, &y.C1)
	return z
}

// SetRandom used only in tests
// TODO eliminate this method!
func (z *{{.Name}}) SetRandom() *{{.Name}} {
	z.C0.B0.A0.SetRandom()
	z.C0.B0.A1.SetRandom()
	z.C0.B1.A0.SetRandom()
	z.C0.B1.A1.SetRandom()
	z.C0.B2.A0.SetRandom()
	z.C0.B2.A1.SetRandom()
	z.C1.B0.A0.SetRandom()
	z.C1.B0.A1.SetRandom()
	z.C1.B1.A0.SetRandom()
	z.C1.B1.A1.SetRandom()
	z.C1.B2.A0.SetRandom()
	z.C1.B2.A1.SetRandom()
	return z
}
`
